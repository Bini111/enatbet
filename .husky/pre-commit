#!/bin/bash

# Complete Husky/Lint-Staged Fix
# Run this from your project root: ./complete-fix.sh

set -e

echo "🔧 Complete Fix for Husky Pre-commit Issues"
echo "============================================"
echo ""

# Check if in git repo
if [ ! -d ".git" ]; then
    echo "❌ Error: Not in a git repository"
    exit 1
fi

# 1. Remove incorrectly placed lint-staged config
echo "📝 Step 1: Removing incorrectly placed configs..."
if [ -f "src/.lintstagedrc.json" ]; then
    rm src/.lintstagedrc.json
    echo "   ✅ Removed src/.lintstagedrc.json"
else
    echo "   ℹ️  No src/.lintstagedrc.json found"
fi

# 2. Create comprehensive .prettierignore
echo ""
echo "📝 Step 2: Creating comprehensive .prettierignore..."
cat > .prettierignore << 'EOF'
# Dependencies
node_modules/
**/node_modules/

# Build outputs
build/
dist/
.expo/
.expo-shared/
**/build/
**/dist/

# Android platform files
android/app/google-services*.json
android/app/google-services-1.json
android/build/
android/.gradle/

# iOS platform files  
ios/**/Images.xcassets/**
ios/**/Podfile.properties*.json
ios/Pods/
ios/build/

# Lock files
package-lock.json
yarn.lock
pnpm-lock.yaml

# Firebase
firebase.json
firestore.indexes.json

# Cache
.eslintcache
*.cache
EOF
echo "   ✅ Created .prettierignore"

# 3. Create SIMPLE lint-staged config (no ESLint to avoid killing)
echo ""
echo "📝 Step 3: Creating simple .lintstagedrc.json (prettier only)..."
cat > .lintstagedrc.json << 'EOF'
{
  "src/**/*.{js,jsx,ts,tsx}": [
    "prettier --write --ignore-unknown"
  ],
  "*.{json,md,yml,yaml}": [
    "prettier --write --ignore-unknown"
  ]
}
EOF
echo "   ✅ Created .lintstagedrc.json in project root"

# 4. Update .gitignore
echo ""
echo "📝 Step 4: Updating .gitignore..."
if [ -f ".gitignore" ]; then
    if ! grep -q "google-services-1.json" .gitignore 2>/dev/null; then
        cat >> .gitignore << 'EOF'

# Platform-specific generated files
android/app/google-services-1.json
android/app/google-services.json  
ios/**/Podfile.properties-1.json
ios/**/Podfile.properties.json
EOF
        echo "   ✅ Added platform files to .gitignore"
    else
        echo "   ℹ️  .gitignore already up to date"
    fi
fi

# 5. Unstage problematic files
echo ""
echo "📝 Step 5: Unstaging problematic platform files..."
git reset HEAD android/app/google-services*.json 2>/dev/null || true
git reset HEAD ios/**/Images.xcassets/** 2>/dev/null || true  
git reset HEAD ios/**/Podfile.properties*.json 2>/dev/null || true
echo "   ✅ Unstaged platform files"

# 6. Clear caches
echo ""
echo "📝 Step 6: Clearing caches..."
rm -f .eslintcache
echo "   ✅ Cleared ESLint cache"

# 7. Test the setup
echo ""
echo "📝 Step 7: Testing lint-staged..."
echo ""
if npx lint-staged; then
    echo ""
    echo "✅ SUCCESS! Lint-staged is working!"
else
    echo ""
    echo "⚠️  Lint-staged still has issues. See suggestions below."
fi

echo ""
echo "============================================"
echo "🎯 Next Steps:"
echo ""
echo "1. Review what changed:"
echo "   git status"
echo ""
echo "2. Stage your actual source code changes:"
echo "   git add src/"
echo ""
echo "3. Try committing again:"
echo "   git commit -m 'your message'"
echo ""
echo "💡 If still having issues:"
echo "   - Check that .lintstagedrc.json is in PROJECT ROOT (not in src/)"
echo "   - Run: npx lint-staged --verbose"
echo "   - Or bypass temporarily: git commit --no-verify -m 'message'"
echo ""
echo "📚 Optional: Run ESLint manually instead of in pre-commit:"
echo "   npm run lint (or) npx eslint src/"