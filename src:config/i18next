// src/config/i18n.ts
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import * as Localization from 'expo-localization';

import en from '../locales/en.json';
import am from '../locales/am.json';

const resources = {
  en: { translation: en },
  am: { translation: am },
};

/**
 * Safe locale resolver that handles regional variants
 * Examples: en-GB -> en, en-US -> en, am-ET -> am
 */
const getSafeLocale = (locale: string): string => {
  const baseLocale = locale.split('-')[0].toLowerCase();
  const supportedLocales = Object.keys(resources);
  
  if (supportedLocales.includes(baseLocale)) {
    return baseLocale;
  }
  
  // Fallback to English
  return 'en';
};

const detectedLocale = Localization.locale || 'en';
const safeLocale = getSafeLocale(detectedLocale);

i18n
  .use(initReactI18next)
  .init({
    resources,
    lng: safeLocale,
    fallbackLng: 'en',
    interpolation: {
      escapeValue: false, // React already escapes
    },
    compatibilityJSON: 'v3',
  });

export default i18n;

// Type-safe translation helper
export type TranslationKey = keyof typeof en;
export const t = (key: TranslationKey, params?: Record<string, string | number>): string => {
  return i18n.t(key, params);
};

// Get current language for use in formatters
export const getCurrentLanguage = (): string => {
  return i18n.language || 'en';
};