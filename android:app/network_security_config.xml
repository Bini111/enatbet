<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <!-- Disable cleartext traffic for all domains -->
    <domain-config cleartextTrafficPermitted="false">
        <domain includeSubdomains="true">enatbet.app</domain>
        <domain includeSubdomains="true">*.firebaseio.com</domain>
        <domain includeSubdomains="true">*.googleapis.com</domain>
        <domain includeSubdomains="true">*.stripe.com</domain>
    </domain-config>

    <!-- Exempt localhost for development -->
    <domain-config cleartextTrafficPermitted="true">
        <domain includeSubdomains="true">localhost</domain>
        <domain includeSubdomains="true">127.0.0.1</domain>
    </domain-config>

    <!-- Trust system CAs -->
    <trust-anchors>
        <certificates src="system" />
    </trust-anchors>
</network-security-config>
```
===== END FILE: android/network_security_config.xml =====

---

===== BEGIN FILE: firestore.rules (CORRECTED) =====
```
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuth() { return request.auth != null; }
    function isOwner(uid) { return isAuth() && request.auth.uid == uid; }
    function isAdmin() { return isAuth() && request.auth.token.admin == true; }
    function isBackend() { return isAuth() && request.auth.token.admin == true; }

    // Users
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['email', 'firstName', 'lastName']);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Listings - only published listings public, drafts private
    match /listings/{listingId} {
      allow read: if resource.data.isPublished == true || isOwner(resource.data.hostId) || isAdmin();
      allow create: if isAuth() && request.resource.data.hostId == request.auth.uid;
      allow update: if isOwner(resource.data.hostId) || isAdmin();
      allow delete: if isOwner(resource.data.hostId) || isAdmin();
    }

    // Bookings - only guest/host/admin can read
    match /bookings/{bookingId} {
      allow read: if isAuth() && 
        (resource.data.guestId == request.auth.uid || 
         resource.data.hostId == request.auth.uid || 
         isAdmin());
      allow create: if isAuth() && request.resource.data.guestId == request.auth.uid;
      allow update: if isAuth() && 
        (resource.data.guestId == request.auth.uid || 
         resource.data.hostId == request.auth.uid) || 
        isAdmin();
      allow delete: if isAdmin();
    }

    // Conversations - only participants
    match /conversations/{conversationId} {
      allow read: if isAuth() && request.auth.uid in resource.data.participantIds;
      allow create: if isAuth() && request.auth.uid in request.resource.data.participantIds;
      allow update: if isAuth() && request.auth.uid in resource.data.participantIds;
      allow delete: if isAdmin();

      match /messages/{messageId} {
        allow read: if isAuth() && request.auth.uid in 
          get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
        allow create: if isAuth() && request.resource.data.senderId == request.auth.uid;
        allow delete: if isAdmin();
      }
    }

    // Payments - backend only
    match /payments/{paymentId} {
      allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create, update, delete: if isBackend();
    }

    // Reviews - must have booking
    match /reviews/{reviewId} {
      allow read: if true; // Public
      allow create: if isAuth() && 
        request.resource.data.guestId == request.auth.uid &&
        request.resource.data.rating > 0 && request.resource.data.rating <= 5;
      allow update: if isAuth() && 
        (isOwner(resource.data.guestId) || 
         isOwner(get(/databases/$(database)/documents/listings/$(resource.data.listingId)).data.hostId)) ||
        isAdmin();
      allow delete: if isAdmin();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
```
===== END FILE: firestore.rules (CORRECTED) =====

---

===== BEGIN FILE: storage.rules (HARDENED) =====
```
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    function isAuth() { return request.auth != null; }
    function isUser(uid) { return request.auth.uid == uid; }

    // Profile images: users/{uid}/profile/*
    match /users/{userId}/profile/{fileName} {
      allow read: if true;
      allow create, update: if isUser(userId) && request.resource.size < 5 * 1024 * 1024;
      allow delete: if isUser(userId);
    }

    // Listing images: listings/{listingId}/* - only host can upload
    match /listings/{listingId}/{fileName} {
      allow read: if true;
      allow create, update: if isAuth() && 
        request.resource.size < 10 * 1024 * 1024 &&
        // Must be the listing's host (via security rule check in app)
        request.auth.uid == resource.metadata.hostId;
      allow delete: if isAuth() && request.auth.uid == resource.metadata.hostId;
    }

    // Chat images: conversations/{conversationId}/{fileName}
    match /conversations/{conversationId}/{fileName} {
      allow read: if isAuth() && request.auth.uid in
        get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      allow create: if isAuth() && request.resource.size < 5 * 1024 * 1024;
      allow delete: if isAuth();
    }

    // Deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}